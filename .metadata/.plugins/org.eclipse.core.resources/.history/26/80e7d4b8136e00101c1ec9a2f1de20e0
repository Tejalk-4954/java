package multi;

import java.util.ArrayList;
import java.util.List;

public class Deadlockexample {
 public static void main(String[] args) {
	
	 number Number=new number();
	 
	 Addthread add=new Addthread(Number);
	 RemoveThread remove=new RemoveThread(Number);
}
}

class number
{
   int count=1;
   List<Integer> list=new ArrayList<Integer>();
   
   public synchronized void addnumber() throws InterruptedException
   {
	   if(list.size()==5)
	   {
		   System.out.println("size cant be greater than 5");
		   wait();
	   }
	   list.add(count);
	   count++;
	   System.out.println("Element added ...."+count+"notify remover");
	   notify();
   }
   
   public synchronized void removenumber() throws InterruptedException
   {
	   if(list.size()==0)
	   {
		   System.out.println("i have nothing ....add something");
		   wait();
	   }
	   
	   System.out.println("element remove"+list.remove(0)+"notify adder");
	   notify();
   }
}

class Addthread extends Thread
{
   number num;
   public Addthread(number num)
   {
	   this.num=num;
   }
   
   public void run()
   {
	   while(true)
	   {
		   try {
			num.addnumber();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		   try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	   }
   }
}

class RemoveThread extends Thread
{
	number num;
	   public RemoveThread(number num)
	   {
		   this.num=num;
	   }
	   
	   public void run()
	   {
		   while(true)
		   {
			   try {
				num.removenumber();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			   try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		   }
	   }
}